import os
import openai
import base64
import csv
import json
from tqdm import tqdm
from dotenv import load_dotenv
from openai import OpenAI

# üîê –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á –∏–∑ .env
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

FOLDER_PATH = "./cards"
CSV_PATH = "results.csv"

HEADERS = [
    "Email", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ì–æ—Ä–æ–¥",
    "–¢–µ–ª", "–ö–æ–º–ø–∞–Ω–∏—è - –Ω–∞–∑–≤", "–ö–æ–º–ø–∞–Ω–∏—è - —Å–∞–π—Ç", "–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
]

PROMPT = (
    "–ò–∑–≤–ª–µ–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–∏–∑–∏—Ç–∫–∏ –∏ –≤–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:\n"
    "{\n"
    "  \"Email\": \"\",\n"
    "  \"–ò–º—è\": \"\",\n"
    "  \"–§–∞–º–∏–ª–∏—è\": \"\",\n"
    "  \"–î–æ–ª–∂–Ω–æ—Å—Ç—å\": \"\",\n"
    "  \"–ì–æ—Ä–æ–¥\": \"\",\n"
    "  \"–¢–µ–ª\": \"\",\n"
    "  \"–ö–æ–º–ø–∞–Ω–∏—è - –Ω–∞–∑–≤\": \"\",\n"
    "  \"–ö–æ–º–ø–∞–Ω–∏—è - —Å–∞–π—Ç\": \"\",\n"
    "  \"–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\": \"\"\n"
    "}\n"
    "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∏–ª–µ ```json```."
)

# –û—á–∏—â–∞–µ–º Markdown-–æ–±—ë—Ä—Ç–∫–∏, –µ—Å–ª–∏ GPT –≤—Å—ë –∂–µ –∏—Ö –¥–æ–±–∞–≤–∏–ª
def clean_json_response(raw):
    raw = raw.strip()
    if raw.startswith("```json"):
        raw = raw[7:]
    if raw.endswith("```"):
        raw = raw[:-3]
    return raw.strip()

def analyze_image(image_path):
    try:
        with open(image_path, "rb") as f:
            base64_image = base64.b64encode(f.read()).decode("utf-8")

        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {
                    "role": "user",
                    "content": [
                        { "type": "text", "text": PROMPT },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/png;base64,{base64_image}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=1000
        )

        content = response.choices[0].message.content.strip()
        clean_content = clean_json_response(content)

        try:
            data = json.loads(clean_content)
            return [data.get(h, "") for h in HEADERS]
        except json.JSONDecodeError as e:
            return [f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {content}"] + [""] * (len(HEADERS) - 1)

    except Exception as e:
        return [f"‚ùå –û—à–∏–±–∫–∞ API: {str(e)}"] + [""] * (len(HEADERS) - 1)

# üìÅ –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É —Å –≤–∏–∑–∏—Ç–∫–∞–º–∏
image_files = sorted([
    f for f in os.listdir(FOLDER_PATH)
    if f.lower().endswith((".png", ".jpg", ".jpeg", ".webp"))
])

# üì§ –ü–∏—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV
with open(CSV_PATH, "w", newline="", encoding="utf-8") as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["–§–∞–π–ª"] + HEADERS)

    for filename in tqdm(image_files, desc="üìé –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–∑–∏—Ç–æ–∫"):
        path = os.path.join(FOLDER_PATH, filename)
        row = analyze_image(path)
        writer.writerow([filename] + row)

print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {CSV_PATH}")
